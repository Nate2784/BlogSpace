version: '3.8'

services:
  # PostgreSQL Database with enhanced configuration
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: blogspace
      POSTGRES_USER: blogspace_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-blogspace_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blogspace_user -d blogspace"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache with enhanced configuration
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    sysctls:
      - net.core.somaxconn=1024

  # Django Web Application with enhanced configuration
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8000}:8000"
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key-here}
      - DATABASE_URL=postgresql://blogspace_user:${POSTGRES_PASSWORD:-blogspace_password}@db:5432/blogspace
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - DJANGO_SETTINGS_MODULE=myblog.settings
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@blogspace.com}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-False}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-False}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE:-False}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/", "||", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Worker for background tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key-here}
      - DATABASE_URL=postgresql://blogspace_user:${POSTGRES_PASSWORD:-blogspace_password}@db:5432/blogspace
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A myblog worker -l info --concurrency=2
    healthcheck:
      test: ["CMD", "celery", "-A", "myblog", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - production

  # Nginx Reverse Proxy with enhanced configuration
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - logs_volume:/var/log/nginx
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local
